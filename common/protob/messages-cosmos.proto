syntax = "proto2";
package hw.trezor.messages.cosmos;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageCosmos";

/**
 * Used to encapsulate an arbitrary protobuf struct.
 * Currently only used for serializing txs for signing.
 * @embed
 */
message AnyType {
    required string type_url = 1; // canonical type name, e.g. /cosmos.tx.v1beta1.MsgSend
    required bytes value = 2; // serialized protobuf struct
}

/**
 * Request: Ask the device for a Cosmos address.
 * @start
 * @next CosmosAddress
 * @next Failure
 */
message CosmosGetAddress {
    repeated uint32 address_n = 1;  // BIP-32-style path to derive the key from master node
    optional string chain_name = 2 [default='cosmoshub'];
    optional bool show_display = 3; // optionally prompt for confirmation on Trezor display
}

/**
 * Response: A Cosmos address.
 * @end
 */
message CosmosAddress {
    required string address = 1;    // prefixed bech32 Cosmos address
}

/**
 * Request: Ask device for a public key corresponding to address_n path.
 * @start
 * @next CosmosPublicKey
 */
message CosmosGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional string chain_name = 2 [default='cosmoshub'];
    optional bool show_display = 3; // optionally show on display before sending the result
}

/**
 * Response: A public key corresponding to address_n path.
 * @end
 */
message CosmosPublicKey {
    required bytes value = 1;
}

/**
 * Also used in Cosmos tx serialization
 * @embed
 */
message CosmosFee {
    repeated CosmosCoin amount = 1;
    required uint64 gas_limit = 2;
    optional string payer = 3;
    optional string granter = 4;
}

/**
 * Request: Starts the Cosmos transaction protocol flow.
 * A transaction consists of these common fields and a series of Cosmos<Any>Msg messages.
 * These parts form a JSON structure (a string) in Trezor's memory, which is signed to produce a CosmosSignedTx.
 * @start
 * @next CosmosTxRequest
 * @next Failure
*/
message CosmosSignTx {
    repeated uint32 address_n = 1; // BIP-32-style path to derive the key from master node
    optional string chain_name = 2 [default='cosmoshub'];
    required uint32 msg_count = 3; // count of Cosmos<Any>Msg to be included in this tx
    required uint64 account_number = 4;
    required uint64 sequence = 5;
    required CosmosFee fee = 6;
    required string chain_id = 7;
    optional string memo = 8;
    optional uint64 timeout_height = 9;
}

/**
 * Response: Trezor requests the next message or signals that it is ready to send a CosmosSignedTx.
 * @next TODO (possible messages)
 */
message CosmosTxRequest {
}

/**
 * Representation of Cosmos native currencies, e.g. ATOM, LUNA, ...
 * Follows cosmos.base.v1beta1.Coin spec
 * @embed
 */
message CosmosCoin {
    required string denom = 1; // typically with prefix, eg uatom, uluna, aevmos
    required string amount = 2; // serialized in cosmos protobuf as string
}

/*
(from LedgerHQ/app-terra)
        {"bank/MsgSend",                                "Send"},
        {"bank/MsgMultiSend",                           "MultiSend"},
        {"market/MsgSwapSend",                          "Swap Send"},
        {"market/MsgSwap",                              "Swap"},
        {"oracle/MsgExchangeRatePrevote",               "ExchangeRate Prevote"},
        {"oracle/MsgExchangeRateVote",                  "ExchangeRate Vote"},
        {"oracle/MsgDelegateFeedConsent",               "Delegate Feed Consent"},
        {"oracle/MsgAggregateExchangeRatePrevote",      "Aggregate ExchangeRate Prevote"},
        {"oracle/MsgAggregateExchangeRateVote",         "Aggregate ExchangeRate Vote"},
        {"staking/MsgDelegate",                         "Delegate"},
        {"staking/MsgUndelegate",                       "Undelegate"},
        {"staking/MsgBeginRedelegate",                  "Redelegate"},
        {"staking/MsgCreateValidator",                  "Create Validator"},
        {"staking/MsgEditValidator",                    "Edit Validator"},
        {"slashing/MsgUnjail",                          "Unjail"},
        {"gov/MsgSubmitProposal",                       "Propose"},
        {"gov/MsgDeposit",                              "Deposit"},
        {"gov/MsgVote",                                 "Vote"},
        {"wasm/MsgStoreCode",                           "Store Code"},
        {"wasm/MsgInstantiateContract",                 "Instantiate Contract"},
        {"wasm/MsgExecuteContract",                     "Execute Contract"},
        {"wasm/MsgMigrateContract",                     "Migrate Contract"},
        {"wasm/MsgUpdateContractOwner",                 "Update Contract Owner"},
        {"crisis/MsgVerifyInvariant",                   "Verify Invariant"},
        {"distribution/MsgWithdrawDelegationReward",    "Withdraw Reward"},
        {"distribution/MsgWithdrawValidatorCommission", "Withdraw Commission"},
        {"distribution/MsgModifyWithdrawAddress",       "Modify Withdraw Address"},
        {"distribution/MsgFundCommunityPool",           "Fund Community Pool"},
        {"evidence/MsgSubmitEvidence",                  "Submit Evidence"},
        {"gov/MsgSubmitProposal",                       "Submit Proposal"},
        {"gov/MsgDeposit",                              "Deposit"},
        {"gov/MsgVote",                                 "Vote"},
        {"msgauth/MsgGrantAuthorization",               "Grant Authorization"},
        {"msgauth/MsgRevokeAuthorization",              "Revote Authorization"},
        {"msgauth/MsgExecAuthorized",                   "Execute Authorized"},
*/

// cosmos.bank.v1beta1

/**
 * Request: Ask the device to include a Cosmos MsgSend msg in the tx.
 * @next CosmosTxRequest
 * @next CosmosSignedTx
 * @next Failure
 */
 message CosmosBankV1beta1MsgSend {
    required string from_address = 1;
    required string to_address = 2;
    repeated CosmosCoin amounts = 3;
}

/**
 * Request: Ask the device to include a Cosmos MsgMultiSend msg in the tx.
 * @next CosmosTxRequest
 * @next CosmosSignedTx
 * @next Failure
 */
message CosmosBankV1beta1MsgMultiSend {
    repeated Input inputs = 1;
    repeated Output outputs = 2;

    message Input {
        required string address = 1;
        repeated CosmosCoin amounts = 2;
    }

    message Output {
        required string address = 1;
        repeated CosmosCoin amounts = 2;
    }
}

// cosmwasm.wasm.v1

message CosmwasmWasmV1MsgClearAdmin {
    required string sender = 1; // address
    required string contract = 3; // id = 3; follows cosmwasm proto specification
}

message CosmwasmWasmV1MsgUpdateAdmin {
    required string sender = 1;
    required string new_admin = 2;
    required string contract = 3;
}

message CosmwasmWasmV1MsgExecuteContract {
    required string sender = 1; // address
    required string contract = 2; // address
    required bytes msg = 3; // json-encoded msg
    repeated CosmosCoin funds = 5; // id = 5; follows cosmwasm proto specification
}

message CosmwasmWasmV1MsgInstantiateContract {
    required string sender = 1;
    optional string admin = 2; // also address
    required uint64 code_id = 3;
    optional string label = 4;
    required bytes msg = 5;
    repeated CosmosCoin funds = 6;
}

message CosmwasmWasmV1MsgMigrateContract {
    required string sender = 1; // address
    required string contract = 2; // address
    required uint64 code_id = 3;
    required bytes msg = 4;
}

message CosmwasmWasmV1MsgStoreCode {
    required string sender = 1;
    required bytes wasm_byte_code = 2;
    reserved 3, 4;
    optional AccessConfig instantiate_permission = 5;

    message AccessConfig {
        required AccessType permission = 1;
        optional string address = 2; // required if ACCESS_TYPE_ONLY_ADDRESS
    }

    enum AccessType {
        ACCESS_TYPE_UNSPECIFIED = 0;
        ACCESS_TYPE_NOBODY = 1;
        ACCESS_TYPE_ONLY_ADDRESS = 2;
        ACCESS_TYPE_EVERYBODY = 3;
    }
}

// terra.wasm.v1beta1

message TerraWasmV1beta1MsgClearContractAdmin {
    required string admin = 1; // address; current admin
    required string contract = 2; // address
}

message TerraWasmV1beta1MsgUpdateContractAdmin {
    required string admin = 1;
    required string new_admin = 2;
    required string contract = 3;
}

message TerraWasmV1beta1MsgExecuteContract {
    required string sender = 1; // address
    required string contract = 2; // address
    required bytes execute_msg = 3; // json-encoded msg
    repeated CosmosCoin coins = 5; // id = 5; follows terra proto spec
}

message TerraWasmV1beta1MsgInstantiateContract {
    required string sender = 1;
    optional string admin = 2; // also address
    required uint64 code_id = 3;
    required bytes init_msg = 4;
    repeated CosmosCoin init_coins = 5;
}

message TerraWasmV1beta1MsgMigrateCode {
    required uint64 code_id = 1;
    required string sender = 2;
    required bytes wasm_byte_code = 3;
}

message TerraWasmV1beta1MsgMigrateContract {
    required string admin = 1; // address
    required string contract = 2; // address
    required uint64 new_code_id = 3;
    required bytes migrate_msg = 4;
}

message TerraWasmV1beta1MsgStoreCode {
    required string sender = 1;
    required bytes wasm_byte_code = 2;
}

/**
 * Response: A transaction signature and public key corresponding to the address_n path in CosmosSignTx.
 * @end
 */
message CosmosSignedTx {
	required bytes signature = 1;
    required bytes public_key = 2;
}

// Extra messages for Cosmos native protobuf serdes

message CosmosTxBody {
    repeated AnyType messages = 1;
    required string memo = 2;
    required uint64 timeout_height = 3;
}

message CosmosModeInfo {
    oneof sum {
        Single single = 1;
        // `multi` not implemented yet
    }

    message Single {
        required SignMode mode = 1;
    }

    // from cosmos.tx.signing.v1beta1.SignMode
    enum SignMode {
        SIGN_MODE_UNSPECIFIED = 0;
        SIGN_MODE_DIRECT = 1;
        SIGN_MODE_TEXTUAL = 2;
        SIGN_MODE_LEGACY_AMINO_JSON = 127;
    }
}

message CosmosSignerInfo {
    required AnyType public_key = 1;
    required CosmosModeInfo mode_info = 2;
    required uint64 sequence = 3;
}

message CosmosAuthInfo {
    repeated CosmosSignerInfo signer_infos = 1;   
    required CosmosFee fee = 2;
}

message CosmosTx {
    required CosmosTxBody body = 1;
    required CosmosAuthInfo auth_info = 2;
    repeated bytes signatures = 3;
}

message CosmosSignDoc {
    required bytes body_bytes = 1;
    required bytes auth_info_bytes = 2;
    required string chain_id = 3;
    required uint64 account_number = 4;
}
